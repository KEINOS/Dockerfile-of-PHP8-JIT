#!/bin/sh
set -e

# -----------------------------------------------------------------------------
#  Constants
# -----------------------------------------------------------------------------
TAG_RELESED_DEFAULT='8.0.0-dev-build-20200904'

URL_SRC_ARCHIVE="https://github.com/KEINOS/Dockerfile_of_PHP8-JIT/releases/download/${TAG_RELESED:-$TAG_RELESED_DEFAULT}/php.7z"
URL_SRC_ARCHIVE_SIGNATURE="https://github.com/KEINOS/Dockerfile_of_PHP8-JIT/releases/download/${TAG_RELESED:-$TAG_RELESED_DEFAULT}/php.7z.sig"
URL_PUBKEY_SIGNATURE="https://github.com/KEINOS/Dockerfile_of_PHP8-JIT/releases/download/${TAG_RELESED:-$TAG_RELESED_DEFAULT}/id_rsa.pkcs8.pub"

name_file_archive='php.7z'
name_file_archive_sign='php.7z.sig'
name_file_key_public_pkcs8='id_rsa.pkcs8.pub'

path_dir_src='/usr/src'
path_dir_src_ext="${path_dir_src}/php"

# File path to be downloaded or copyied
path_file_archive="${path_dir_src}/${name_file_archive}"
path_file_archive_sign="${path_dir_src}/${name_file_archive_sign}"
path_file_key_public_pkcs8="${path_dir_src}/${name_file_key_public_pkcs8}"
# File path of the public key that should be bundled within the image
path_file_key_public_pkcs8_bundle="/${name_file_key_public_pkcs8}"

# -----------------------------------------------------------------------------
#  Functions
# -----------------------------------------------------------------------------
usage() {
    echo "usage: ${0} COMMAND"
    echo
    echo "Manage php source archive lifecycle."
    echo
    echo "Commands:"
    echo "   extract  extract PHP source archive if not already done."
    echo "   delete   delete extracted PHP source."
    echo "   prune    delete extracted PHP source and the cache. (Less image size)"
}

copy_publickey_of_sign() {
    [ -f "$path_file_key_public_pkcs8_bundle" ] || {
        echo >&2 "Public key of the signature not found at: ${path_file_key_public_pkcs8_bundle}"
        echo >&2 '*This file should be bundled in the image.'
        exit 1
    }
    cp "$path_file_key_public_pkcs8_bundle" "$path_file_key_public_pkcs8"
}

download_signature_archive() {
    [ -f "$path_file_archive_sign" ] || {
        echo "- Downloading signature of the archive from: ${URL_SRC_ARCHIVE_SIGNATURE} to: ${path_file_archive_sign} "
        curl --location --output "$path_file_archive_sign" $URL_SRC_ARCHIVE_SIGNATURE
    }
}

download_src_archive() {
    [ -f "$path_file_archive" ] && {
        echo '- Archive of PHP source found.'
    } || {
        echo "- Downloading PHP source archive from: ${URL_SRC_ARCHIVE} to: ${path_file_archive}"
        curl --location --output "$path_file_archive" $URL_SRC_ARCHIVE
    }
}

verify_src_archive() {
    echo '- Verifying archive with the signature'

    printf '%s' "* pubkey: ${path_file_key_public_pkcs8} ... "
    [ -f "$path_file_key_public_pkcs8" ] && echo 'OK' || echo 'NG'

    printf '%s' "* sign: ${path_file_archive_sign} ... "
    [ -f "$path_file_archive_sign" ] && echo 'OK' || echo 'NG'

    printf '%s' "* arch: ${path_file_archive} .... "
    [ -f "$path_file_archive" ] && echo 'OK' || echo 'NG'

    libressl dgst \
        -sha256 \
        -verify "$path_file_key_public_pkcs8" \
        -signature "$path_file_archive_sign" \
        "$path_file_archive"
}

# -----------------------------------------------------------------------------
#  Main
# -----------------------------------------------------------------------------

case "$1" in
    extract)
        mkdir -p "$path_dir_src_ext"
        [ -f "$path_file_archive" ] || {
            download_src_archive &&
                download_signature_archive &&
                copy_publickey_of_sign &&
                verify_src_archive
            [ "$?" -ne 0 ] && {
                echo >&2 '* Failed to download source and signature.'
                exit 1
            }
        }

        apk add --no-cache --virtual .arch-deps p7zip
        if [ ! -f "$path_dir_src_ext/.docker-extracted" ]; then
            echo '- Extracting PHP source into ...' $path_dir_src_ext
            7z x -o$path_dir_src_ext /usr/src/php.7z &&
                touch "$path_dir_src_ext/.docker-extracted" &&
                echo 'PHP source extracted'
        fi
        apk del --purge --no-network .arch-deps
        ;;

    delete)
        rm -rf "$path_dir_src_ext"
        ;;

    prune)
        rm -rf "$path_dir_src_ext"
        rm -rf /usr/src/*.pub /usr/src/*
        ;;

    *)
        usage
        exit 1
        ;;
esac

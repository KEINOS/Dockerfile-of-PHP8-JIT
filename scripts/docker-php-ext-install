#!/bin/sh
set -e

# prefer user supplied CFLAGS, but default to our PHP_CFLAGS
: ${CFLAGS:=$PHP_CFLAGS}
: ${CPPFLAGS:=$PHP_CPPFLAGS}
: ${LDFLAGS:=$PHP_LDFLAGS}
export CFLAGS CPPFLAGS LDFLAGS

srcExists=
if [ -d /usr/src/php ]; then
	srcExists=1
fi
docker-php-source extract
if [ -z "$srcExists" ]; then
	touch /usr/src/php/.docker-delete-me
fi

cd /usr/src/php/php-src-master/ext

usage() {
	echo "Installs PHP extensions."
	echo
	echo "usage: $0 [-jN] [--ini-name file.ini] ext-name [ext-name ...]"
	echo
	echo "   ie: $0 gd mysqli"
	echo "       $0 pdo pdo_mysql"
	echo "       $0 -j5 gd mbstring mysqli pdo pdo_mysql shmop"
	echo
	echo "options:"
	echo "   -j          Number of processors to use. Number of 'nproc' will be used by default."
	echo "   --ini-name  Alternate php.ini for configuration."
	echo
	echo 'if custom ./configure arguments are necessary, see docker-php-ext-configure'
	echo
	echo 'Possible values for ext-name:'
	printf '   '
	find . \
		-mindepth 2 \
		-maxdepth 2 \
		-type f \
		-name 'config.m4' |
		xargs -n1 dirname |
		xargs -n1 basename |
		sort |
		xargs
	echo
	echo 'Some of the above modules are already compiled into PHP; please check'
	echo 'the output of "php -i" to see which modules are already loaded.'
}

opts="$(getopt -o 'h?j:' --long 'help,ini-name:,jobs:' -- "$@" || { usage >&2 && false; })"
eval set -- "$opts"

j=$(nproc)
iniName=
while true; do
	flag="$1"
	shift
	case "$flag" in
	--help | -h | '-?') usage && exit 0 ;;
	--ini-name) iniName="$1" && shift ;;
	--jobs | -j) j="$1" && shift ;;
	--) break ;;
	*)
		{
			echo "error: unknown flag: $flag"
			usage
		} >&2
		exit 1
		;;
	esac
done

# Detect extensions from the command args
exts=
for ext; do
	if [ "hash" = "$ext" ]; then
		echo >&2 "warning: hash extension is pre-built in PHP. PECL verion is old and not supported."
		echo >&2 "re-installation skipped: hash"
		continue
	fi
	if [ "json" = "$ext" ]; then
		echo >&2 "warning: json extension is pre-built in PHP. PECL verion is old and not supported."
		echo >&2 "re-installation skipped: json"
		continue
	fi
	if [ -z "$ext" ]; then
		continue
	fi
	if [ ! -d "$ext" ]; then
		echo >&2 "error: $PWD/$ext does not exist"
		echo >&2
		usage >&2
		exit 1
	fi
	exts="$exts $ext"
done

if [ -z "$exts" ]; then
	usage >&2
	exit 1
fi

# Detect if Alpine Linux
pm='unknown'
if [ -e /lib/apk/db/installed ]; then
	pm='apk'
fi

apkDel=
if [ "$pm" = 'apk' ]; then
	if [ -n "$PHPIZE_DEPS" ]; then
		if apk info --installed .phpize-deps-configure >/dev/null; then
			apkDel='.phpize-deps-configure'
		elif ! apk info --installed .phpize-deps >/dev/null; then
			echo '- Installing dependencies for PHPize ...'
			apk add --no-cache --virtual .phpize-deps $PHPIZE_DEPS
			apkDel='.phpize-deps'
		fi
	fi
fi

# Install extensions under /usr/src/php/php-src-master/ext
popDir="$PWD"
for ext in $exts; do
	flag_ext_installed=1
	cd "$ext"
	[ -e Makefile ] || docker-php-ext-configure "$ext"
	make -j"$j"
	make -j"$j" install
	find modules \
		-maxdepth 1 \
		-name '*.so' \
		-exec basename '{}' ';' |
		xargs -r docker-php-ext-enable ${iniName:+--ini-name "$iniName"} &&
		flag_ext_installed=0
	make -j"$j" clean
	[ $flag_ext_installed -eq 0 ] && {
		echo "${ext} installed"
	} || {
		echo >&2 "Failed to install ${ext}"
	}
	cd "$popDir"
done

if [ "$pm" = 'apk' ] && [ -n "$apkDel" ]; then
	echo '- Deleting temporary apk packages ...'
	apk del --no-network $apkDel
fi

if [ -e /usr/src/php/.docker-delete-me ]; then
	echo '- Deleting extracted PHP source ...'
	docker-php-source delete
fi
